#!/usr/bin/perl 
#
# $Id$

use Pg;

$dbmain = 'template1';
$dbname = 'weather';
$dbhost = "";

$interval_start="6/1/1998 0:00";
$interval_end="2/20/1999 23:59";

%wxobs = ('obstime', \$obstime,  'temp_in', \$temp_in, 
	  'temp_out', \$temp_out,  'rh_in',  \$rh_in,
	  'rh_out',  \$rh_out,    'dp_in', \$dp_in,
	  'dp_out', \$dp_in,      'chill', \$chill,
	  'rain_tot', \$rain_tot, 'rain_rate', \$rain_rate,
	  'gust_spd', \$gust_spd, 'gust_dir', \$gust_dir,
	  'wavg_spd', \$wavg_spd, 'wavg_dir', \$wavg_dir,
	  'barometer', \$barometer);
%curobs = %wxobs;
$curobs{'rtot_offset'}=\$rtot_offset;
$curobs{'selector'}=\$selector;

#$dbhost = get_resp("Connect to host running Postgres:",$dbhost);

#$conn = Pg::connectdb("dbname=$dbmain host=$dbhost");
#cmp_eq(PGRES_CONNECTION_OK, $conn->status);

$user="mikef";

if ($dbhost eq "")  {
    $conn = Pg::connectdb("dbname=$dbname user=$user");
} else {
    $conn = Pg::connectdb("dbname=$dbname host=$dbhost user=$user");
}

if (!cmp_eq(PGRES_CONNECTION_OK, $conn->status)) {
  die("Cannot find database weather!");
}

$db = $conn->db;
#cmp_eq($dbname, $db);

$user = $conn->user;
#cmp_ne("", $user);

$host = $conn->host;
#cmp_ne("", $host);

$port = $conn->port;
#cmp_ne("", $port);

#load_location();
#load_curobs();

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
$today=sprintf("%.2d/%.2d/%.4d %.2d:%.2d:%.2d",$mon+1,$mday,$year,0,0,0);

#temp_extreme($interval_start,$interval_end);
rain_stats($interval_start,$interval_end);

exit;

sub rain_stats {
  my($start,$end)=@_;


  $result=$conn->exec("SELECT rain_tot, rtot_offset FROM current_obs;");
  if (cmp_eq(PGRES_TUPLES_OK, $result->resultStatus)) {
    $tup=$result->ntuples-1;
    $rain=getfield(0,'rain_tot');
    $offset=getfield(0,'rtot_offset');
  }
 
  
  $result=$conn->exec("BEGIN WORK;");

  $result=$conn->exec("DECLARE sel CURSOR FOR SELECT obstime,rain_tot 
          FROM wxobs WHERE (obstime >= \'$start\' AND obstime <= \'$end\');");
#          order by obstime; ");

  $tup=$result->ntuples;
 
  $result=$conn->exec("FETCH FORWARD 1 IN sel;");
  print("Number of entries: $tup\n");

  if (cmp_eq(PGRES_TUPLES_OK, $result->resultStatus)) {
    $tup=$result->ntuples-1;
    $start_rain=getfield(0,'rain_tot');
    print("$start_rain\n");
  }
#  $result=$conn->exec("MOVE FORWARD 1000000 IN sel;");
#  $result=$conn->exec("FETCH BACKWARD 1 IN sel;");

  $result=$conn->exec("DECLARE rsel CURSOR FOR SELECT obstime,rain_tot FROM wxobs WHERE (obstime >= \'$start\' AND obstime <= \'$end\') ORDER BY obstime USING >; ");

  $result=$conn->exec("FETCH FORWARD 1 IN rsel;");


  if (cmp_eq(PGRES_TUPLES_OK, $result->resultStatus)) {
    $tup=$result->ntuples-1;
    $stop_rain=getfield(0,'rain_tot');
    print("$stop_rain\n");
  }

  $result=$conn->exec("END;");
  $rainfall=mmtoin($stop_rain - $start_rain);
  printf("Rainfall from $start to $end: $rainfall\n");
}
  
sub pg_now {
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
    localtime(time);
  $year += 1900;
  $str=sprintf("%.2d/%.2d/%.4d %.2d:%.2d:%.2d",$mon+1,$mday,$year,$hour,$min,$sec);
  return($str);
}

sub CtoF {
  my($c)=@_;
  return(9*$c/5 + 32.0);
}

sub mmtoin {
  my($mm)=@_;
  return($mm/25.4);
}

sub mbtoin {
  my($mb)=@_;
  return($mb*0.0295299875);
}

sub mpstomph {
  my($mps)=@_;
  return($mps*2.23693629);
}


sub getfield {
  my($tup,$fname)=@_;
  my $field = $result->fnumber($fname);
  return ($result->getvalue($tup,$field));
}

sub rgetfield {
  my($tup,$fname,$ref) = @_;
  my $field = $result->fnumber($fname);
  $$ref=($result->getvalue($tup,$field));
}

sub get_resp {
  my ($prompt, $default)=@_;
  
  select STDOUT; $|=1;
  print("$prompt [$default] ");
  $in=<>; chop;
  $in=~s/^[\s\t]+//g;
  $in=~s/[\s\t\n]+$//g;
  if ($in=~/^[\s\t]*$/ ) { return($default); }
  return($in);
}

sub get_yn {
  my ($prompt, $default)=@_;
  
  select STDOUT; $|=1;
  print("$prompt [$default] ");
  $in=<>; chop;
  $in=~s/^[\s\t]+//g;
  $in=~s/[\s\t\n]+$//g;
  if ($in=~/^[\s\t]*$/ ) { $in=$default; }
  if ($in=~/^[\s\t]*[Yy1Tt]/) {
    return(1);
  } else {
    return(0);
  }
}    

sub cmp_eq {
  my($cmp,$ret)=@_;
  my $msg;
  my $rval;
  
  if ($cmp == $ret) {
    $rval=1;
  } else {
    $msg = $conn->errorMessage;
    print "error: $cmp, $ret\n$msg\n";
    $rval=0;
  }
  return($rval);
}

sub cmp_ne {
  my($cmp,$ret)=@_;
  my $msg;
  my $rval;
  
  if ($cmp != $ret) {
    $rval=1;
  } else {
    $msg = $conn->errorMessage;
    print "error: $cmp, $ret\n$msg\n";
    $rval=0;
  }
  return($rval);
}
